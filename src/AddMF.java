
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

public class AddMF extends javax.swing.JFrame implements ActionListener {
//    use timer for run actionPerformed overtime
//    Usage:    1. use timer.start() for start run actionPerformed function
//              2. use timer.stop() for stop run actionPerformed function
    Timer tm = new Timer(0, (ActionListener) this);

    String output;
    
    double start;
    double end;
    double step;

    GraphPanel graphPanel;
    final int WIDTH = 600;
    final int HEIGHT = 200;

//    create all empty object
    Triangle tri;
    Trapezoid tra;
    Gaussian gau;
    Bell bel;
    Sigmoidal sig;

    /**
     * Creates new form AddMF
     */
    public AddMF() {
        initComponents();
        this.init();
    }

//    ==========================================================================
//    Function for create Initial value
//    ==========================================================================
    public void init() {
        output = "";
        
        this.start = 0;
        this.end = 0;
        this.step = 0;

        this.tri = new Triangle();
        this.tra = new Trapezoid();
        this.gau = new Gaussian();
        this.bel = new Bell();
        this.sig = new Sigmoidal();

        graphPanel = new GraphPanel(WIDTH, HEIGHT);
        graphPanel.setOpaque(false);
        graphPanel.setVisible(true);
        graphPanel.setMargin(20, 20, 20, 20);

        this.jPanel1.add(graphPanel, BorderLayout.CENTER);
    }

//    ==========================================================================
//    Function for set start value, end value and step value
//    ==========================================================================
    public void setUniverse(double start, double end, double step) {
        this.start = start;
        this.end = end;
        this.step = step;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        triangle = new javax.swing.JRadioButton();
        trapezoid = new javax.swing.JRadioButton();
        gaussian = new javax.swing.JRadioButton();
        bell = new javax.swing.JRadioButton();
        sigmoidal = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        triA = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        triB = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        triC = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        traA = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        traB = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        traC = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        traD = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        gauC = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        gauSigma = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        belA = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        belB = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        belC = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        sigA = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        sigC = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        cancle = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        preview = new javax.swing.JButton();

        setTitle("Add MF");

        triangle.setText("Triangle");
        triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleActionPerformed(evt);
            }
        });

        trapezoid.setText("Trapezoid");
        trapezoid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trapezoidActionPerformed(evt);
            }
        });

        gaussian.setText("Gaussian");
        gaussian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaussianActionPerformed(evt);
            }
        });

        bell.setText("Bell");
        bell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bellActionPerformed(evt);
            }
        });

        sigmoidal.setText("Sigmoidal");
        sigmoidal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sigmoidalActionPerformed(evt);
            }
        });

        jLabel1.setText("Name");

        jLabel2.setText("a");

        triA.setEnabled(false);

        jLabel3.setText("b");

        triB.setEnabled(false);

        jLabel4.setText("c");

        triC.setEnabled(false);

        jLabel5.setText("a");

        traA.setEnabled(false);

        jLabel6.setText("b");

        traB.setEnabled(false);

        jLabel7.setText("c");

        traC.setEnabled(false);

        jLabel8.setText("d");

        traD.setEnabled(false);

        jLabel9.setText("c");

        gauC.setEnabled(false);

        jLabel10.setText("sigma");

        gauSigma.setEnabled(false);

        jLabel11.setText("a");

        belA.setEnabled(false);

        jLabel12.setText("b");

        belB.setEnabled(false);

        jLabel13.setText("c");

        belC.setEnabled(false);

        jLabel14.setText("a");

        sigA.setEnabled(false);

        jLabel15.setText("c");

        sigC.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        cancle.setBackground(new java.awt.Color(255, 0, 0));
        cancle.setText("Cancle");
        cancle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleActionPerformed(evt);
            }
        });

        ok.setBackground(new java.awt.Color(0, 255, 0));
        ok.setText("OK");
        ok.setEnabled(false);
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jLabel16.setForeground(new java.awt.Color(255, 153, 0));
        jLabel16.setText("Warning: a < b < c");

        jLabel17.setForeground(new java.awt.Color(255, 153, 0));
        jLabel17.setText("Warning: a < b <= c <d");

        preview.setText("Preview");
        preview.setEnabled(false);
        preview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(triangle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(triA, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(triB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(triC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel16))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(trapezoid)
                            .addComponent(gaussian)
                            .addComponent(bell)
                            .addComponent(sigmoidal))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sigA, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sigC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(preview))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gauC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gauSigma, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(traA, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(traB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(traC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(traD, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(belA, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(belB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(belC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ok)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancle)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(triangle)
                    .addComponent(jLabel2)
                    .addComponent(triA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(triB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(triC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trapezoid)
                    .addComponent(jLabel5)
                    .addComponent(traA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(traB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(traD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(traC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gaussian)
                    .addComponent(jLabel9)
                    .addComponent(gauC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(gauSigma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bell)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(belB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(belC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(belA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sigmoidal)
                    .addComponent(jLabel14)
                    .addComponent(sigA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(sigC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preview))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancle)
                    .addComponent(ok))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    ==========================================================================
//    Function for event of cancle:JButton
//    ==========================================================================
    private void cancleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancleActionPerformed

//    ==========================================================================
//    Function for event of triangle:JRadioButton
//    ==========================================================================
    private void triangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleActionPerformed
        // TODO add your handling code here
//        if you select Triangle
        if (this.triangle.isSelected()) {
//            enable for parameter of Triangle JTextField
            this.triA.setEnabled(true);
            this.triB.setEnabled(true);
            this.triC.setEnabled(true);
//            disable for other input type
            this.trapezoid.setEnabled(false);
            this.gaussian.setEnabled(false);
            this.bell.setEnabled(false);
            this.sigmoidal.setEnabled(false);
            println("select Triangle");
            tm.start(); // start infinite loop
        } //        if you don't select Triangle
        else {
//            disable for parameter of Triangle JTextField
            this.triA.setEnabled(false);
            this.triB.setEnabled(false);
            this.triC.setEnabled(false);
//            enable for other input type
            this.trapezoid.setEnabled(true);
            this.gaussian.setEnabled(true);
            this.bell.setEnabled(true);
            this.sigmoidal.setEnabled(true);
            println("not select Triangle");
            tm.stop();  // stop infinite loop
            this.preview.setEnabled(false);
            this.ok.setEnabled(false);

            this.jPanel1.removeAll();
            this.graphPanel = new GraphPanel(WIDTH, HEIGHT);
            graphPanel.setOpaque(false);
            graphPanel.setVisible(true);
            graphPanel.setMargin(20, 20, 20, 20);
            this.jPanel1.add(this.graphPanel, BorderLayout.CENTER);

            this.tri = new Triangle();
        }
    }//GEN-LAST:event_triangleActionPerformed

//    ==========================================================================
//    Function for event of trapezoid:JRadioButton
//    ==========================================================================
    private void trapezoidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trapezoidActionPerformed
        // TODO add your handling code here:
//        if you select Trapezoid
        if (this.trapezoid.isSelected()) {
//            enable for parameter of Trapezoid JTextField
            this.traA.setEnabled(true);
            this.traB.setEnabled(true);
            this.traC.setEnabled(true);
            this.traD.setEnabled(true);
//            disable for other input type
            this.triangle.setEnabled(false);
            this.gaussian.setEnabled(false);
            this.bell.setEnabled(false);
            this.sigmoidal.setEnabled(false);
            println("select Trapezoid");
            tm.start(); // start infinite loop
        } //        if you don't select Trapezoid
        else {
//            disable for parameter of Trapezoid JTextField
            this.traA.setEnabled(false);
            this.traB.setEnabled(false);
            this.traC.setEnabled(false);
            this.traD.setEnabled(false);
//            enable for other input type
            this.triangle.setEnabled(true);
            this.gaussian.setEnabled(true);
            this.bell.setEnabled(true);
            this.sigmoidal.setEnabled(true);
            println("not select Trapezoid");
            tm.stop();  // stop infinite loop
            this.preview.setEnabled(false);
            this.ok.setEnabled(false);

            this.jPanel1.removeAll();
            this.graphPanel = new GraphPanel(WIDTH, HEIGHT);
            graphPanel.setOpaque(false);
            graphPanel.setVisible(true);
            graphPanel.setMargin(20, 20, 20, 20);
            this.jPanel1.add(this.graphPanel, BorderLayout.CENTER);

            this.tra = new Trapezoid();
        }
    }//GEN-LAST:event_trapezoidActionPerformed

//    ==========================================================================
//    Function for event of gaussian:JRadioButton
//    ==========================================================================
    private void gaussianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaussianActionPerformed
        // TODO add your handling code here:
//        if you select gaussian
        if (this.gaussian.isSelected()) {
//            enable for parameter of gaussian JTextField
            this.gauC.setEnabled(true);
            this.gauSigma.setEnabled(true);
//            disable for other input type
            this.triangle.setEnabled(false);
            this.trapezoid.setEnabled(false);
            this.bell.setEnabled(false);
            this.sigmoidal.setEnabled(false);
            println("select gaussian");
            tm.start(); // start infinite loop
        } //        if you don't select gaussian
        else {
//            disable for parameter of gaussian JTextField
            this.gauC.setEnabled(false);
            this.gauSigma.setEnabled(false);
//            enable for other input type
            this.triangle.setEnabled(true);
            this.trapezoid.setEnabled(true);
            this.bell.setEnabled(true);
            this.sigmoidal.setEnabled(true);
            println("not select gaussian");
            tm.stop();  // stop infinite loop
            this.preview.setEnabled(false);
            this.ok.setEnabled(false);

            this.jPanel1.removeAll();
            this.graphPanel = new GraphPanel(WIDTH, HEIGHT);
            graphPanel.setOpaque(false);
            graphPanel.setVisible(true);
            graphPanel.setMargin(20, 20, 20, 20);
            this.jPanel1.add(this.graphPanel, BorderLayout.CENTER);

            this.gau = new Gaussian();
        }
    }//GEN-LAST:event_gaussianActionPerformed

//    ==========================================================================
//    Function for event of bell:JRadioButton
//    ==========================================================================
    private void bellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bellActionPerformed
        // TODO add your handling code here:
//        if you select bell
        if (this.bell.isSelected()) {
//            enable for parameter of bell JTextField
            this.belA.setEnabled(true);
            this.belB.setEnabled(true);
            this.belC.setEnabled(true);
//            disable for other input type
            this.triangle.setEnabled(false);
            this.trapezoid.setEnabled(false);
            this.gaussian.setEnabled(false);
            this.sigmoidal.setEnabled(false);
            println("select bell");
            tm.start(); // start infinite loop
        } //        if you don't select bell
        else {
//            disable for parameter of bell JTextField
            this.belA.setEnabled(false);
            this.belB.setEnabled(false);
            this.belC.setEnabled(false);
//            enable for other input type
            this.triangle.setEnabled(true);
            this.trapezoid.setEnabled(true);
            this.gaussian.setEnabled(true);
            this.sigmoidal.setEnabled(true);
            println("not select bell");
            tm.stop();  // stop infinite loop
            this.preview.setEnabled(false);
            this.ok.setEnabled(false);

            this.jPanel1.removeAll();
            this.graphPanel = new GraphPanel(WIDTH, HEIGHT);
            graphPanel.setOpaque(false);
            graphPanel.setVisible(true);
            graphPanel.setMargin(20, 20, 20, 20);
            this.jPanel1.add(this.graphPanel, BorderLayout.CENTER);

            this.bel = new Bell();
        }
    }//GEN-LAST:event_bellActionPerformed

//    ==========================================================================
//    Function for event of sigmoidal:JRadioButton
//    ==========================================================================
    private void sigmoidalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sigmoidalActionPerformed
        // TODO add your handling code here:
//        if you select sigmoidal
        if (this.sigmoidal.isSelected()) {
//            enable for parameter of sigmoidal JTextField
            this.sigA.setEnabled(true);
            this.sigC.setEnabled(true);
//            disable for other input type
            this.triangle.setEnabled(false);
            this.trapezoid.setEnabled(false);
            this.gaussian.setEnabled(false);
            this.bell.setEnabled(false);
            println("select sigmoidal");
            tm.start(); // start infinite loop
        } //        if you don't select sigmoidal
        else {
//            disable for parameter of sigmoidal JTextField
            this.sigA.setEnabled(false);
            this.sigC.setEnabled(false);
//            enable for other input type
            this.triangle.setEnabled(true);
            this.trapezoid.setEnabled(true);
            this.gaussian.setEnabled(true);
            this.bell.setEnabled(true);
            println("not select sigmoidal");
            tm.stop();  // stop infinite loop
            this.preview.setEnabled(false);
            this.ok.setEnabled(false);

            this.jPanel1.removeAll();
            this.graphPanel = new GraphPanel(WIDTH, HEIGHT);
            graphPanel.setOpaque(false);
            graphPanel.setVisible(true);
            graphPanel.setMargin(20, 20, 20, 20);
            this.jPanel1.add(this.graphPanel, BorderLayout.CENTER);

            this.sig = new Sigmoidal();
        }
    }//GEN-LAST:event_sigmoidalActionPerformed

//    ==========================================================================
//    Function for event of preview:JButton
//    ==========================================================================
    private void previewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewActionPerformed
        // TODO add your handling code here:
//        if you select triangle
        if (this.triangle.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.triA.getText().isEmpty()
                    && !this.triB.getText().isEmpty()
                    && !this.triC.getText().isEmpty()) {
                try {
                    String name = this.name.getText();
                    double a = Double.parseDouble(this.triA.getText());
                    double b = Double.parseDouble(this.triB.getText());
                    double c = Double.parseDouble(this.triC.getText());

                    this.tri = new Triangle();
                    this.tri.name = name;
                    this.tri.a = a;
                    this.tri.b = b;
                    this.tri.c = c;

                    this.tri.membershipGrade(this.start, this.end, this.step);

                    this.jPanel1.setVisible(false);
                    this.jPanel1.removeAll();
                    graphPanel = new GraphPanel(WIDTH, HEIGHT);
                    graphPanel.setOpaque(false);
                    graphPanel.setVisible(true);
                    graphPanel.setMargin(20, 20, 20, 20);
                    graphPanel.setData(this.tri.name, this.tri.member);
                    this.jPanel1.add(graphPanel, BorderLayout.CENTER);
                    this.jPanel1.setVisible(true);

                    println("Triangle run..");
                    this.ok.setEnabled(true);
                } catch (Exception error) {

                }
            }
        } //        if you select trapezoid
        else if (this.trapezoid.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.traA.getText().isEmpty()
                    && !this.traB.getText().isEmpty()
                    && !this.traC.getText().isEmpty()
                    && !this.traD.getText().isEmpty()) {
                try {
                    String name = this.name.getText();
                    double a = Double.parseDouble(this.traA.getText());
                    double b = Double.parseDouble(this.traB.getText());
                    double c = Double.parseDouble(this.traC.getText());
                    double d = Double.parseDouble(this.traD.getText());

                    this.tra = new Trapezoid();
                    this.tra.name = name;
                    this.tra.a = a;
                    this.tra.b = b;
                    this.tra.c = c;
                    this.tra.d = d;

                    this.tra.membershipGrade(this.start, this.end, this.step);

                    this.jPanel1.setVisible(false);
                    this.jPanel1.removeAll();
                    graphPanel = new GraphPanel(WIDTH, HEIGHT);
                    graphPanel.setOpaque(false);
                    graphPanel.setVisible(true);
                    graphPanel.setMargin(20, 20, 20, 20);
                    graphPanel.setData(this.tra.name, this.tra.member);
                    this.jPanel1.add(graphPanel, BorderLayout.CENTER);
                    this.jPanel1.setVisible(true);

                    println("Trapezoid run..");
                    this.ok.setEnabled(true);
                } catch (Exception error) {

                }
            }
        } //        if you select gaussian
        else if (this.gaussian.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.gauC.getText().isEmpty()
                    && !this.gauSigma.getText().isEmpty()) {
                try {
                    String name = this.name.getText();
                    double c = Double.parseDouble(this.gauC.getText());
                    double sigma = Double.parseDouble(this.gauSigma.getText());

                    this.gau = new Gaussian();
                    this.gau.name = name;
                    this.gau.c = c;
                    this.gau.sigma = sigma;

                    this.gau.membershipGrade(this.start, this.end, this.step);

                    this.jPanel1.setVisible(false);
                    this.jPanel1.removeAll();
                    graphPanel = new GraphPanel(WIDTH, HEIGHT);
                    graphPanel.setOpaque(false);
                    graphPanel.setVisible(true);
                    graphPanel.setMargin(20, 20, 20, 20);
                    graphPanel.setData(this.gau.name, this.gau.member);
                    this.jPanel1.add(graphPanel, BorderLayout.CENTER);
                    this.jPanel1.setVisible(true);

                    println("Gaussian run..");
                    this.ok.setEnabled(true);
                } catch (Exception error) {

                }
            }
        } //        if you select bell
        else if (this.bell.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.belA.getText().isEmpty()
                    && !this.belB.getText().isEmpty()
                    && !this.belC.getText().isEmpty()) {
                try {
                    String name = this.name.getText();
                    double a = Double.parseDouble(this.belA.getText());
                    double b = Double.parseDouble(this.belB.getText());
                    double c = Double.parseDouble(this.belC.getText());
                    
                    this.bel = new Bell();
                    this.bel.name = name;
                    this.bel.a = a;
                    this.bel.b = b;
                    this.bel.c = c;
                    
                    this.bel.membershipGrade(this.start, this.end, this.step);
                    
                    this.jPanel1.setVisible(false);
                    this.jPanel1.removeAll();
                    graphPanel = new GraphPanel(WIDTH, HEIGHT);
                    graphPanel.setOpaque(false);
                    graphPanel.setVisible(true);
                    graphPanel.setMargin(20, 20, 20, 20);
                    graphPanel.setData(this.bel.name, this.bel.member);
                    this.jPanel1.add(graphPanel, BorderLayout.CENTER);
                    this.jPanel1.setVisible(true);
                    
                    println("Bell run..");
                    this.ok.setEnabled(true);
                } catch (Exception error) {

                }
            }
        }
//        if you select sigmoidal
        else if (this.sigmoidal.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.sigA.getText().isEmpty()
                    && !this.sigC.getText().isEmpty()) {
                try{
                    String name = this.name.getText();
                    double a = Double.parseDouble(this.sigA.getText());
                    double c = Double.parseDouble(this.sigC.getText());
                    
                    this.sig = new Sigmoidal();
                    this.sig.name = name;
                    this.sig.a = a;
                    this.sig.c = c;
                    
                    this.sig.membershipGrade(this.start, this.end, this.step);
                    
                    this.jPanel1.setVisible(false);
                    this.jPanel1.removeAll();
                    graphPanel = new GraphPanel(WIDTH, HEIGHT);
                    graphPanel.setOpaque(false);
                    graphPanel.setVisible(true);
                    graphPanel.setMargin(20, 20, 20, 20);
                    graphPanel.setData(this.sig.name, this.sig.member);
                    this.jPanel1.add(graphPanel, BorderLayout.CENTER);
                    this.jPanel1.setVisible(true);
                    
                    println("Sigmoidal run..");
                    this.ok.setEnabled(true);
                }catch(Exception error){
                    
                }
            }
        }
        
    }//GEN-LAST:event_previewActionPerformed

//    ==========================================================================
//    ok: JButton
//    ==========================================================================
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        // TODO add your handling code here:
        if(this.triangle.isSelected()){
            print("Triangle:" + this.tri.name);
            print(" a:" + this.tri.a);
            print(" b:" + this.tri.b);
            println(" c:" + this.tri.c);
            this.output = "Triangle";
        }
        else if(this.trapezoid.isSelected()){
            print("Trapezoid:" + this.tra.name);
            print(" a:" + this.tra.a);
            print(" b:" + this.tra.b);
            print(" c:" + this.tra.c);
            println(" d:" + this.tra.d);
            this.output = "Trapezoid";
        }
        else if(this.gaussian.isSelected()){
            print("Gaussian:" + this.gau.name);
            print(" c:" + this.gau.c);
            println(" sigma:" + this.gau.sigma);
            this.output = "Gaussian";
        }
        else if(this.bell.isSelected()){
            print("Bell:" + this.bel.name);
            print(" a:" + this.bel.a);
            print(" b:" + this.bel.b);
            println(" c:" + this.bel.c);
            this.output = "Bell";
        }
        else if(this.sigmoidal.isSelected()){
            print("Sigmoidal:" + this.sig.name);
            print(" a:" + this.sig.a);
            println(" c:" + this.sig.c);
            this.output = "Sigmoidal";
        }
        this.dispose();
    }//GEN-LAST:event_okActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AddMF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AddMF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AddMF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AddMF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AddMF().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField belA;
    private javax.swing.JTextField belB;
    private javax.swing.JTextField belC;
    private javax.swing.JRadioButton bell;
    private javax.swing.JButton cancle;
    private javax.swing.JTextField gauC;
    private javax.swing.JTextField gauSigma;
    private javax.swing.JRadioButton gaussian;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField name;
    private javax.swing.JButton ok;
    private javax.swing.JButton preview;
    private javax.swing.JTextField sigA;
    private javax.swing.JTextField sigC;
    private javax.swing.JRadioButton sigmoidal;
    private javax.swing.JTextField traA;
    private javax.swing.JTextField traB;
    private javax.swing.JTextField traC;
    private javax.swing.JTextField traD;
    private javax.swing.JRadioButton trapezoid;
    private javax.swing.JTextField triA;
    private javax.swing.JTextField triB;
    private javax.swing.JTextField triC;
    private javax.swing.JRadioButton triangle;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
//        if you select triangle
        if (this.triangle.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.triA.getText().isEmpty()
                    && !this.triB.getText().isEmpty()
                    && !this.triC.getText().isEmpty()) {
                this.preview.setEnabled(true);
            } else {
                this.preview.setEnabled(false);
                this.ok.setEnabled(false);
            }
        } //        if you select trapezoid
        else if (this.trapezoid.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.traA.getText().isEmpty()
                    && !this.traB.getText().isEmpty()
                    && !this.traC.getText().isEmpty()
                    && !this.traD.getText().isEmpty()) {
                this.preview.setEnabled(true);
            } else {
                this.preview.setEnabled(false);
                this.ok.setEnabled(false);
            }
        } //        if you select gaussian
        else if (this.gaussian.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.gauC.getText().isEmpty()
                    && !this.gauSigma.getText().isEmpty()) {
                this.preview.setEnabled(true);
            } else {
                this.preview.setEnabled(false);
                this.ok.setEnabled(false);
            }
        } //        if you select bell
        else if (this.bell.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.belA.getText().isEmpty()
                    && !this.belB.getText().isEmpty()
                    && !this.belC.getText().isEmpty()) {
                this.preview.setEnabled(true);
            } else {
                this.preview.setEnabled(false);
                this.ok.setEnabled(false);
            }
        } //        if you select sigmoidal
        else if (this.sigmoidal.isSelected()) {
//            check all parameter is not empty
            if (!this.name.getText().isEmpty()
                    && !this.sigA.getText().isEmpty()
                    && !this.sigC.getText().isEmpty()) {
                this.preview.setEnabled(true);
            } else {
                this.preview.setEnabled(false);
                this.ok.setEnabled(false);
            }
        }
    }

//    ##########################################################################
//    Function for easy show something
//    ##########################################################################
    private void print(Object o) {
        System.out.print(o);
    }

    private void println(Object o) {
        System.out.println(o);
    }
}
