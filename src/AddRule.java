
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public class AddRule extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form AddRule
     */
    public AddRule() {
        initComponents();
//        set Initial value of variable
        this.allRule = new DefaultListModel();
        this.selectedRule = new DefaultListModel();
        this.rules = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        selectedList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        allList = new javax.swing.JList();
        add = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        cancle = new javax.swing.JButton();

        setTitle("Add Fuzzy If-Then Rules");

        jScrollPane1.setViewportView(selectedList);

        jScrollPane2.setViewportView(allList);

        add.setText("ADD >>>");
        add.setEnabled(false);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        delete.setText("<<< Delete");
        delete.setEnabled(false);

        ok.setBackground(new java.awt.Color(0, 255, 51));
        ok.setText("OK");

        cancle.setBackground(new java.awt.Color(255, 0, 0));
        cancle.setText("Cancle");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ok)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancle)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(add)
                        .addGap(18, 18, 18)
                        .addComponent(delete))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancle)
                    .addComponent(ok))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_addActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddRule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddRule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddRule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddRule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddRule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JList allList;
    private javax.swing.JButton cancle;
    private javax.swing.JButton delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton ok;
    private javax.swing.JList selectedList;
    // End of variables declaration//GEN-END:variables

//    use timer for run actionPerformed overtime
//    Usage:    1. use timer.start() for start run actionPerformed function
//              2. use timer.stop() for stop run actionPerformed function
    Timer tm = new Timer(0, (ActionListener) this);
    public DefaultListModel allRule;        // model for allList: JList
    public DefaultListModel selectedRule;   // model for selectedList: JList
//        format of rules 
//        [ ["If X is ...", p, q, r, [ [FuzzySet, MFindex] ] ],
//          ["If X is ...", p, q, r, [ [FuzzySet, MFindex], [FuzzySet, MFindex] ] ]
//        ]
    public List rules;                      // List of all rules
    
//    ==========================================================================
//    Function for set all rules
//    ==========================================================================
    public void setRules(List rules){
//        Iterator for access each List in rules
//        for(int i=0; i<rules.size(); i++){
//            List copy = new ArrayList();
//            List rule = (List)rules.get(i); // get a rule in rules List
//            
//            String str = (String) rule.get(0);
//            println(rule.get(1));
//            println(rule.get(1).getClass().getName());
//            double p = (double) rule.get(1);
//            double q = (double) rule.get(2);
//            double r = (double) rule.get(3);
////            format of member [FuzzySet, MFindex], [FuzzySet, MFindex]
//            List member = ((List)rule.get(4));
//            List newMember = new ArrayList();
//            for(int j = 0; j < member.size(); j++){
//                List temp = (List) member.get(j);
//                List newTemp = new ArrayList();
//                FuzzySet fs = new FuzzySet();
//                fs.copy((FuzzySet)temp.get(0));
//                int MFindex = (int) temp.get(1);
//                
//                newTemp.add(fs);
//                newTemp.add(MFindex);
//                newMember.add(newTemp);
//            }
            
//            copy.add(str);
//            copy.add(p);
//            copy.add(q);
//            copy.add(r);
//            copy.add(newMember);
//            
//            rules.add(copy);
//        }
//        println("Copy rules: "+rules);
    }
    
    public void addRule(List rules){
//        format of rules 
//        [ ["If X is ...", p, q, r, [ [FuzzySet, MFindex] ] ],
//          ["If X is ...", p, q, r, [ [FuzzySet, MFindex], [FuzzySet, MFindex] ] ]
//        ]
//        Iterator for access each List in rules
//        for(int i=0; i<rules.size(); i++){
//            List rule = (List)rules.get(i);     // access each List in rules
//            String str = (String)rule.get(0);   // access string at index 0
//            this.allRule.addElement(str);      // add string for show in allRule:JList
//            //rule.set(1, 100);
//        }
//        this.allList.setModel(this.allRule);    // show string in allRule:JList
        //tm.start();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
////        if you select something in allList:JList
//        if(this.allList.getSelectedValue() != null){
//            System.out.print(this.allList.getSelectedIndex()+" ");
//            System.out.println("Obj: "+this.allList.getSelectedValue().getClass().getName());
//            this.add.setEnabled(true);
//        }
////        if you don't select something in allList:JList
//        else{
//            this.add.setEnabled(false);
//        }
    }
    
//    ##########################################################################
//    Function for easy show something
//    ##########################################################################
    private static void print(Object o) {
        System.out.print(o);
    }

    private static void println(Object o) {
        System.out.println(o);
    }
}
